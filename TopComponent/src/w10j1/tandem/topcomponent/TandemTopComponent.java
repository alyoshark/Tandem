/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package w10j1.tandem.topcomponent;

import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import w10j1.tandem.usercommand.UserCommand;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//w10j1.tandem.topcomponent//Tandem//EN",
autostore = false)
@TopComponent.Description(preferredID = "TandemTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "w10j1.tandem.topcomponent.TandemTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TandemAction",
preferredID = "TandemTopComponent")
public final class TandemTopComponent extends TopComponent {

    private String outputStr;
    private UserCommand userCommand = new UserCommand();

    public TandemTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TandemTopComponent.class, "CTL_TandemTopComponent"));
        setToolTipText(NbBundle.getMessage(TandemTopComponent.class, "HINT_TandemTopComponent"));
        WelcomeLabel.setText("Welcome to Tandem! The time is now " + this.getDate());
    }

    private String getDate() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        Date date = new Date();
        return dateFormat.format(date);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WelcomeLabel = new javax.swing.JLabel();
        CommandLabel = new javax.swing.JLabel();
        InputTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputList =  new javax.swing.JList(resultModel);

        org.openide.awt.Mnemonics.setLocalizedText(WelcomeLabel, org.openide.util.NbBundle.getMessage(TandemTopComponent.class, "TandemTopComponent.WelcomeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(CommandLabel, org.openide.util.NbBundle.getMessage(TandemTopComponent.class, "TandemTopComponent.CommandLabel.text")); // NOI18N

        InputTextField.setText(org.openide.util.NbBundle.getMessage(TandemTopComponent.class, "TandemTopComponent.InputTextField.text")); // NOI18N
        InputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextFieldActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(OutputList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WelcomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CommandLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(WelcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputTextField)
                    .addComponent(CommandLabel))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void InputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextFieldActionPerformed
            String input = InputTextField.getText();
            userCommand.initCommand(input);
            userCommand.execute();
            this.outputStr = userCommand.getExecutionResults();
            resultModel.addElement(this.outputStr);
    }//GEN-LAST:event_InputTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CommandLabel;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JList OutputList;
    private javax.swing.JLabel WelcomeLabel;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    javax.swing.DefaultListModel<String> resultModel = new javax.swing.DefaultListModel();
    
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}